Q1. Given a linked list and a key ‘X‘ in, the task is to check if X is present in the linked list or not.

Examples:
input:14->21->11->30->10, X = 14
output:Yes

Explanation: 14 is present in the linked list.

input:6->21->17->30->10->8, X = 13
output:No

solution:


class LinkedList {
    class Node {
    	int data;
    	Node next;
	    Node(int d)	{
		data = d;
		next = null;
	    }
    }

	Node head; 

	// Inserts a new node at the front of the list
	public void push(int new_data)	{
		Node new_node = new Node(new_data);
		new_node.next = head;
		head = new_node;
	}

	// Checks whether the value x is present in linked list
	public boolean search(Node head, int x)
	{
		Node current = head; 
		while (current != null) {
			if (current.data == x)
				return true; // data found
			current = current.next;
		}
		return false; // data not found
	}
	public static void main(String args[]){
		LinkedList llist = new LinkedList();

		llist.push(21);
		llist.push(22);
		llist.push(11);
		llist.push(43);
		llist.push(23);

		if (llist.search(llist.head, 21))
			System.out.println("Yes");
		else
			System.out.println("No");
	}
}


output:
Yes


Approach :
> We have simply traversed the linked list and checked for every node whether its data is equal to
the target
> If found we returned true else if the iterator reached the end of the linked list we returned false.


Q2. Insert a node at the given position in a linked list. We are given a pointer to a node, and the new node is
inserted after the given node.

input: LL = 1 -> 2 -> 4 -> 5 -> 6 pointer = 2 value = 3.
output: 1 -> 2 -> 3 -> 4 -> 5 -> 6

solution:

//node structure
class Node {
    int data;
    Node next;
};

class LinkedList {
  Node head;

  LinkedList(){
    head = null;
  }

  //Add new element at the end of the list
  void push_back(int newElement) {
    Node newNode = new Node();
    newNode.data = newElement;
    newNode.next = null; 
    if(head == null) {
      head = newNode;
    } else {
      Node temp = new Node();
      temp = head;
      while(temp.next != null)
        temp = temp.next;
      temp.next = newNode;
    }    
  }

  //Inserts a new element at the given position
  void push_at(int newElement, int position) {     
    Node newNode = new Node(); 
    newNode.data = newElement;
    newNode.next = null;

    if(position < 1) {
      System.out.print("\nposition should be >= 1.");
    } else if (position == 1) {
      newNode.next = head;
      head = newNode;
    } else {
      
      Node temp = new Node();
      temp = head;
      for(int i = 1; i < position-1; i++) {
        if(temp != null) {
          temp = temp.next;
        }
      }
   
      if(temp != null) {
        newNode.next = temp.next;
        temp.next = newNode;  
      } else {
        System.out.print("\nThe previous node is null.");
      }       
    }
  } 

  //display the content of the list
  void PrintList() {
    Node temp = new Node();
    temp = this.head;
    if(temp != null) {
      System.out.print("The list contains: ");
      while(temp != null) {
        System.out.print(temp.data + " ");
        temp = temp.next;
      }
      System.out.println();
    } else {
      System.out.println("The list is empty.");
    }
  }    

  public static void main(String[] args) {
    LinkedList MyList = new LinkedList();

    //Add three elements at the end of the list.
    MyList.push_back(3);
    MyList.push_back(6);
    MyList.push_back(5);
    MyList.PrintList();

    //Insert an element at position 2
    MyList.push_at(8, 2);
    MyList.PrintList();

    //Insert an element at position 3
    MyList.push_at(9, 3);
    MyList.PrintList();      
  }
}

output:
The list contains: 3 6 5
The list contains: 3 8 6 5
The list contains: 3 8 9 6 5


Approach :
> First, a new node with a given element is created. If the insert position is 1, then the new node is
made to head
> Otherwise, traverse to the node that is previous to the insert position and check if it is null or not.
In case of null, the specified position does not exist
> In other case, assign the next of the new node as the next of the previous node and the next of
the previous node as new node
> The below figure describes the process, if the insert node is other than the head node.


Q3. Given the head of a sorted linked list, delete all duplicates such that each element appears only once.
Return the linked list sorted as well.

Example 1:
input = [1,1,2]
output =[1,2]

Example 2 :
input = [1,1,2,3,3]
Output =[1,2,3]

solution:


//node structure
class Node {
    int data;
    Node next;
};

class LinkedList {
  static Node head;

  LinkedList(){
    head = null;
  }

  //Add new element at the end of the list
  void push_back(int newElement) {
    Node newNode = new Node();
    newNode.data = newElement;
    newNode.next = null; 
    if(head == null) {
      head = newNode;
    } else {
      Node temp = new Node();
      temp = head;
      while(temp.next != null)
        temp = temp.next;
      temp.next = newNode;
    }    
  }

   static void deleteDuplicates() {
        if(head == null || head.next == null)
            return ;
        Node curr = head;
        
        while( curr != null && curr.next != null){
           
            if(curr.data == curr.next.data){
                curr.next = curr.next.next;
            }
            else{
                curr = curr.next; 
            }
        }
        return;
    }
  //display the content of the list
  void PrintList() {
    Node temp = new Node();
    temp = this.head;
    if(temp != null) {
      System.out.print("The list contains: ");
      while(temp != null) {
        System.out.print(temp.data + " ");
        temp = temp.next;
      }
      System.out.println();
    } else {
      System.out.println("The list is empty.");
    }
  }    

  public static void main(String[] args) {
    LinkedList MyList = new LinkedList();

    //Add three elements at the end of the list.
    MyList.push_back(3);
    MyList.push_back(3);
    MyList.push_back(5);
    MyList.push_back(6);
    MyList.push_back(6);
    MyList.push_back(7);
    MyList.PrintList();
    
    deleteDuplicates();
    
    MyList.PrintList();
  
  }
}

output:
The list contains : 3 3 5 6 6 7
The list contains : 3 5 6 7 

Approach:
> Traverse all elements through a while loop if curr node and the next node of curr node are present.
> If the value of curr is equal to the value of prev.
> It means the value is present in the linked list.
> So we can skip the ‘curr’ pointer and prev.next can point to curr.next. By this we ensure that prev now doesn’t
points to curr anymore. The node curr is not pointed anymore, so it would be garbage collected
automatically by JVM.
> Hence we do not need to include curr again in the linked list, so we increment the value of curr otherwise, we
increment the curr pointer.


Q4. Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

Example 1:
input:head = [1,2,2,1]
output:true

Example 2:
input:head = [1,2]
output:false

solution:


class LinkedList {
	Node head; // head of list
	Node slow_ptr, fast_ptr, second_half;

	class Node {
		int data;
		Node next;

		Node(int d)
		{
			data = d;
			next = null;
		}
	}
	boolean isPalindrome(Node head)	{
		slow_ptr = head;
		fast_ptr = head;
		Node prev_of_slow_ptr = head;
		Node midnode = null; // To handle odd size list
		boolean res = true; // initialize result

		if (head != null && head.next != null) {
		
			while (fast_ptr != null
				&& fast_ptr.next != null) {
				fast_ptr = fast_ptr.next.next;
				prev_of_slow_ptr = slow_ptr;
				slow_ptr = slow_ptr.next;
			}

			if (fast_ptr != null) {
				midnode = slow_ptr;
				slow_ptr = slow_ptr.next;
			}
			second_half = slow_ptr;
			prev_of_slow_ptr.next = null; 
			reverse(); 
			res = compareLists(head , second_half); 
			reverse(); 

			if (midnode != null) {
				prev_of_slow_ptr.next = midnode;
				midnode.next = second_half;
			}
			else
				prev_of_slow_ptr.next = second_half;
		}
		return res;
	}
	void reverse(){
		Node prev = null;
		Node current = second_half;
		Node next;
		while (current != null) {
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
		}
		second_half = prev;
	}

	boolean compareLists(Node head1, Node head2)
	{
		Node temp1 = head1;
		Node temp2 = head2;

		while (temp1 != null && temp2 != null) {
			if (temp1.data == temp2.data) {
				temp1 = temp1.next;
				temp2 = temp2.next;
			}
			else
				return false;
		}

		if (temp1 == null && temp2 == null)
			return true;
		return false;
	}

	public void push(int new_data){
	    Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
	}
	public static void main(String[] args){
		LinkedList llist = new LinkedList();

		int arr[] = { 1, 2, 4, 5, 4, 2, 1 };
		for (int i = 0; i < 7; i++) {
			llist.push(arr[i]);
		}
		if (llist.isPalindrome(llist.head) != false) {
			System.out.println("Is Palindrome");
		}
		else {
			System.out.println("Not Palindrome");
		}
	}
}

output:
Is Palindrome



Approach :
= The idea is to first reverse the second half part of the linked list and then check whether the list is
palindrome or not.
= Get the middle of the linked list and reverse the second half of the linked list.
= Check if the first half and second half are identical.
= Construct the original linked list by reversing the second half again and attaching it back to the
first half


Q5. Given two numbers represented by two lists, write a function that returns the sum list. The sum list is a list
representation of the addition of two input numbers.


Example:

input:
List1: 5->6->3//represents number 563
List2: 8->4->2//represents number 842

output:

Resultant list: 1->4->0->5//represents number 1405
Explanation:563+842 =1405

input:
List1:7->5->9->4->6//represents number 75946
List2: 8->4//represents number 84
output:
Resultant list: 7->6->0->3->0//represents number 76030
Explanation: 75946+84=76030

solution:

class LinkedList {

    static Node head1, head2;

    static class Node {

        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }

    void addTwoLists(Node first, Node second) {
        Node start1 = new Node(0);
        start1.next = first;
        Node start2 = new Node(0);
        start2.next = second;

        addPrecedingZeros(start1, start2);
        Node result = new Node(0);
        if (sumTwoNodes(start1.next, start2.next, result) == 1) {
            Node node = new Node(1);
            node.next = result.next;
            result.next = node;
        }
        printList(result.next);
    }

    private int sumTwoNodes(Node first, Node second, Node result) {
        if (first == null) {
            return 0;
        }
        int number = first.data + second.data + sumTwoNodes(first.next, second.next, result);
        Node node = new Node(number % 10);
        node.next = result.next;
        result.next = node;
        return number / 10;
    }
    private void addPrecedingZeros(Node start1, Node start2) {
        Node next1 = start1.next;
        Node next2 = start2.next;
        while (next1 != null && next2 != null) {
            next1 = next1.next;
            next2 = next2.next;
        }
        if (next1 == null && next2 != null) {
            while (next2 != null) {
                Node node = new Node(0);
                node.next = start1.next;
                start1.next = node;
                next2 = next2.next;
            }
        } else if (next2 == null && next1 != null) {
            while (next1 != null) {
                Node node = new Node(0);
                node.next = start2.next;
                start2.next = node;
                next1 = next1.next;
            }
        }
    }

    void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println("");
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // creating first list
        list.head1 = new Node(7);
        list.head1.next = new Node(5);
        list.head1.next.next = new Node(9);
        list.head1.next.next.next = new Node(4);
        list.head1.next.next.next.next = new Node(6);
        System.out.print("First List is ");
        list.printList(head1);

        // creating second list
        list.head2 = new Node(8);
        list.head2.next = new Node(4);
        System.out.print("Second List is ");
        list.printList(head2);

        System.out.print("Resultant List is ");
        // add the two lists and see the result
        list.addTwoLists(head1, head2);
    }
}

output:
First list is 7 5 9 4 6 
Second list is 8 4
Resultant list is 7 6 0 3 0


Approach :
> Traverse both lists to the end and add preceding zeros in the list with lesser digits
> Then call a recursive function on the start nodes of both lists which calls itself for the next nodes of
both lists till it gets to the end
> This function creates a node for the sum of the current digits and returns the carry.
> Traverse the two linked lists in order to add preceding zeros in case a list is having lesser digits
than the other one
>Start from the head node of both lists and call a recursive function for the next nodes
> Continue it till the end of the lists
>Creates a node for current digits sum and returns the carry.